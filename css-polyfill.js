// Generated by CoffeeScript 1.3.3
(function() {
  var AbstractSelectorVisitor, ClassRenamer, ClassRenamerPlugin, CounterDomVisitor, CounterLessVisitor, CounterPlugin, DomVisitor, LessVisitor, MoveToDomVisitor, MoveToLessVisitor, MoveToPlugin, PSEUDO_ELEMENT_NAME, Plugin, PseudoExpanderPlugin, PseudoSelectorExpander, RemoveDisplayNone, RemoveDisplayNonePlugin, SelectorValueNode, SetContentDomVisitor, SetContentPlugin, SetContentVisitor, StringDomVisitor, StringLessVisitor, StringSetPlugin, TargetCounterPlugin, TargetTextPlugin, ValueNode, findBefore, freshClass, freshClassIdCounter, numberingStyle, parseCounters, toRoman,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Plugin = (function() {

    function Plugin() {}

    Plugin.prototype.providedFunctions = function() {
      return {};
    };

    return Plugin;

  })();

  DomVisitor = (function() {

    function DomVisitor(_funcs, _env) {
      var func, name, _ref;
      this._funcs = _funcs != null ? _funcs : {};
      this._env = _env != null ? _env : {};
      _ref = this._funcs;
      for (name in _ref) {
        func = _ref[name];
        less.tree.functions[name] = func;
      }
    }

    DomVisitor.prototype.evalWithContext = function(dataKey, $context) {
      var expr;
      expr = $context.data(dataKey);
      if (!expr) {
        return;
      }
      this._env.$context = $context;
      return expr;
    };

    DomVisitor.prototype.domVisit = function($node) {};

    return DomVisitor;

  })();

  LessVisitor = (function() {

    function LessVisitor($root) {
      this.$root = $root;
      this._visitor = new less.tree.visitor(this);
      this._frames = [];
    }

    LessVisitor.prototype.run = function(root) {
      return this._visitor.visit(root);
    };

    LessVisitor.prototype.peek = function() {
      return this._frames[this._frames.length - 1];
    };

    LessVisitor.prototype.push = function(val) {
      return this._frames.push(val);
    };

    LessVisitor.prototype.pop = function() {
      return this._frames.pop();
    };

    return LessVisitor;

  })();

  AbstractSelectorVisitor = (function(_super) {

    __extends(AbstractSelectorVisitor, _super);

    function AbstractSelectorVisitor() {
      return AbstractSelectorVisitor.__super__.constructor.apply(this, arguments);
    }

    AbstractSelectorVisitor.prototype.operateOnElements = function(frame, $els) {
      return console.error('BUG: Need to implement this method');
    };

    AbstractSelectorVisitor.prototype.dataAppendAll = function($els, dataKey, exprs) {
      var c, content, _i, _len;
      if (exprs) {
        if (!(exprs instanceof Array)) {
          console.error('ERROR: dataAppendAll takes an array of expressions');
        }
        content = $els.data(dataKey) || [];
        for (_i = 0, _len = exprs.length; _i < _len; _i++) {
          c = exprs[_i];
          content.push(c);
        }
        $els.data(dataKey, content);
        $els.addClass('js-polyfill-has-data');
        return $els.addClass("js-polyfill-" + dataKey);
      }
    };

    AbstractSelectorVisitor.prototype.dataSet = function($els, dataKey, expr) {
      if (expr) {
        $els.data(dataKey, expr);
        $els.addClass('js-polyfill-has-data');
        return $els.addClass("js-polyfill-" + dataKey);
      }
    };

    AbstractSelectorVisitor.prototype.visitRuleset = function(node, visitArgs) {
      return this.push({
        selectorAry: [],
        pseudoName: null
      });
    };

    AbstractSelectorVisitor.prototype.visitElement = function(node, visitArgs) {
      var frame;
      frame = this.peek();
      if (/^:/.test(node.value)) {
        return frame.hadPseudoSelectors = true;
      } else {
        frame.selectorAry.push(node.combinator.value);
        return frame.selectorAry.push(node.value);
      }
    };

    AbstractSelectorVisitor.prototype.visitRulesetOut = function(node) {
      var $els, frame, pseudoName, selector, selectorAry;
      frame = this.pop();
      pseudoName = frame.pseudoName;
      selectorAry = frame.selectorAry;
      selector = selectorAry.join(' ');
      $els = this.$root.find(selector);
      return this.operateOnElements(frame, $els, node);
    };

    return AbstractSelectorVisitor;

  })(LessVisitor);

  freshClassIdCounter = 0;

  freshClass = function() {
    return "js-polyfill-autoclass-" + (freshClassIdCounter++);
  };

  ClassRenamerPlugin = {
    lessVisitor: ClassRenamer = (function(_super) {

      __extends(ClassRenamer, _super);

      function ClassRenamer() {
        return ClassRenamer.__super__.constructor.apply(this, arguments);
      }

      ClassRenamer.prototype.isPreEvalVisitor = true;

      ClassRenamer.prototype.visitSelectorOut = function(node, visitArgs) {
        var frame, index, newClass, newElements, oldElements, _ref;
        frame = this.peek();
        newClass = freshClass();
        index = 0;
        newElements = [new less.tree.Element('', "." + newClass, index), new less.tree.Comment(node.toCSS({}), true, index)];
        oldElements = [];
        _.each(node.elements, function(el) {
          if (/^:/.test(el.value)) {
            return newElements.push(el);
          } else if (newElements.length > 2) {
            return newElements.push(el);
          } else {
            return oldElements.push(el);
          }
        });
        node.elements = newElements;
        if ((_ref = frame.selectors) == null) {
          frame.selectors = {};
        }
        return frame.selectors[newClass] = oldElements;
      };

      ClassRenamer.prototype.operateOnElements = function(frame, $els) {
        var className, selector, _ref, _results;
        _ref = frame.selectors;
        _results = [];
        for (className in _ref) {
          selector = _ref[className];
          _results.push($els.addClass(className));
        }
        return _results;
      };

      return ClassRenamer;

    })(AbstractSelectorVisitor)
  };

  PSEUDO_ELEMENT_NAME = 'polyfillpseudo';

  PseudoExpanderPlugin = {
    lessVisitor: PseudoSelectorExpander = (function(_super) {

      __extends(PseudoSelectorExpander, _super);

      function PseudoSelectorExpander() {
        return PseudoSelectorExpander.__super__.constructor.apply(this, arguments);
      }

      PseudoSelectorExpander.prototype.isPreEvalVisitor = true;

      PseudoSelectorExpander.prototype.isPreVisitor = false;

      PseudoSelectorExpander.prototype.isReplacing = false;

      PseudoSelectorExpander.prototype.visitElement = function(node, visitArgs) {
        var frame, isPseudo, _ref;
        PseudoSelectorExpander.__super__.visitElement.apply(this, arguments);
        frame = this.peek();
        isPseudo = /^:/.test(node.value);
        if (isPseudo || frame.pseudoSelectors) {
          if ((_ref = frame.pseudoSelectors) == null) {
            frame.pseudoSelectors = [];
          }
          return frame.pseudoSelectors.push(node);
        }
      };

      PseudoSelectorExpander.prototype.operateOnElements = function(frame, $els, node) {
        var $context, $needsNew, cls, newClass, op, pseudoName, pseudoNode, _i, _len, _ref, _results;
        $context = $els;
        _ref = frame.pseudoSelectors || [];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pseudoNode = _ref[_i];
          switch (pseudoNode.value) {
            case ':before':
              op = 'prepend';
              pseudoName = 'before';
              cls = "js-polyfill-pseudo-" + pseudoName;
              $needsNew = $context.not($context.has(" > ." + cls));
              $needsNew[op]("<" + PSEUDO_ELEMENT_NAME + " class='js-polyfill-pseudo " + cls + "'></" + PSEUDO_ELEMENT_NAME + ">");
              $context = $context.children("." + cls);
              break;
            case ':after':
              op = 'append';
              pseudoName = 'after';
              cls = "js-polyfill-pseudo-" + pseudoName;
              $needsNew = $context.not($context.has(" > ." + cls));
              $needsNew[op]("<" + PSEUDO_ELEMENT_NAME + " class='js-polyfill-pseudo " + cls + "'></" + PSEUDO_ELEMENT_NAME + ">");
              $context = $context.children("." + cls);
              break;
            case ':outside':
              op = 'wrap';
              pseudoName = 'outside';
              cls = "js-polyfill-pseudo-" + pseudoName;
              $needsNew = $context.not($context.filter(function(node) {
                var $parent;
                $parent = $(node).parent();
                return $parent.hasClass(cls);
              }));
              $needsNew[op]("<" + PSEUDO_ELEMENT_NAME + " class='js-polyfill-pseudo " + cls + "'></" + PSEUDO_ELEMENT_NAME + ">");
              $context = $context.parent();
              break;
            default:
              break;
          }
          newClass = freshClass();
          $context.addClass(newClass);
          _results.push(_.each(node.selectors, function(selector) {
            var index;
            index = 0;
            return selector.elements = [new less.tree.Element('', "." + newClass, index)];
          }));
        }
        return _results;
      };

      return PseudoSelectorExpander;

    })(AbstractSelectorVisitor)
  };

  RemoveDisplayNonePlugin = {
    lessVisitor: RemoveDisplayNone = (function(_super) {

      __extends(RemoveDisplayNone, _super);

      function RemoveDisplayNone() {
        return RemoveDisplayNone.__super__.constructor.apply(this, arguments);
      }

      RemoveDisplayNone.prototype.visitRule = function(node, visitArgs) {
        var frame;
        frame = this.peek();
        if ('display' === node.name) {
          if ('none' === node.value["eval"]().value) {
            return frame.hasDisplayNone = true;
          }
        }
      };

      RemoveDisplayNone.prototype.operateOnElements = function(frame, $els) {
        if (frame.hasDisplayNone) {
          return $els.remove();
        }
      };

      return RemoveDisplayNone;

    })(AbstractSelectorVisitor)
  };

  ValueNode = (function() {

    function ValueNode(value) {
      this.value = value;
    }

    ValueNode.prototype.type = 'ValueNode';

    ValueNode.prototype["eval"] = function() {
      return this;
    };

    ValueNode.prototype.compare = function() {
      return console.error('BUG: Should not call compare on these nodes');
    };

    ValueNode.prototype.genCSS = function() {
      return console.warn('BUG: Should not call genCSS on these nodes');
    };

    ValueNode.prototype.toCSS = function() {
      return console.error('BUG: Should not call toCSS on these nodes');
    };

    return ValueNode;

  })();

  SelectorValueNode = (function() {

    function SelectorValueNode(selector, attr) {
      this.selector = selector;
      this.attr = attr;
    }

    SelectorValueNode.prototype["eval"] = function() {
      return this;
    };

    return SelectorValueNode;

  })();

  MoveToPlugin = {
    definedFunctions: {
      'attr': function(attrName) {
        return new ValueNode(this.env.$context.attr(attrName.value));
      },
      'x-filter': function(selector, attrName) {
        var $els;
        if (attrName == null) {
          attrName = null;
        }
        $els = this.env.$context.find(selector.value);
        if (attrName) {
          return new ValueNode($els.attr(attrName.value));
        } else {
          return new ValueNode($els);
        }
      },
      'x-selector': function(selector, attrName) {
        if (attrName == null) {
          attrName = null;
        }
        return new SelectorValueNode(selector.value, attrName != null ? attrName.value : void 0);
      },
      'x-sort': function(pendingElsNode, selectorToCompare) {
        var $context, $pendingEls, $sorted, sorted,
          _this = this;
        if (selectorToCompare == null) {
          selectorToCompare = null;
        }
        $pendingEls = pendingElsNode.value;
        $context = this.env.$context;
        sorted = _.clone($pendingEls).sort(function(a, b) {
          var $a, $b;
          if (selectorToCompare) {
            $a = $(a);
            $b = $(b);
            a = $a.find(selectorToCompare.selector).text();
            b = $b.find(selectorToCompare.selector).text();
          } else {
            a = a.text();
            b = b.text();
          }
          if (a < b) {
            return -1;
          }
          if (a > b) {
            return 1;
          }
          return 0;
        });
        this.env.$context = $context;
        $sorted = $('EMPTY_SET_OF_NODES');
        _.each(sorted, function(el) {
          return $sorted = $sorted.add(el);
        });
        return new ValueNode($sorted);
      },
      pending: function(val) {
        var $nodes, bucketName;
        bucketName = val["eval"](this.env).value;
        if (this.env.buckets) {
          $nodes = this.env.buckets[bucketName] || $('EMPTY_SET_OF_NODES');
          delete this.env.buckets[bucketName];
          return new ValueNode($nodes);
        }
      }
    },
    lessVisitor: MoveToLessVisitor = (function(_super) {

      __extends(MoveToLessVisitor, _super);

      function MoveToLessVisitor() {
        return MoveToLessVisitor.__super__.constructor.apply(this, arguments);
      }

      MoveToLessVisitor.prototype.visitRule = function(node, visitArgs) {
        var frame;
        frame = this.peek();
        switch (node.name) {
          case 'move-to':
            return frame.moveTo = node.value;
        }
      };

      MoveToLessVisitor.prototype.operateOnElements = function(frame, $els) {
        return this.dataSet($els, 'polyfill-move-to', frame.moveTo);
      };

      return MoveToLessVisitor;

    })(AbstractSelectorVisitor),
    domVisitor: MoveToDomVisitor = (function(_super) {

      __extends(MoveToDomVisitor, _super);

      function MoveToDomVisitor() {
        return MoveToDomVisitor.__super__.constructor.apply(this, arguments);
      }

      MoveToDomVisitor.prototype.domVisit = function($node) {
        var moveBucket, _base, _base1, _ref, _ref1, _ref2;
        moveBucket = (_ref = this.evalWithContext('polyfill-move-to', $node)) != null ? _ref["eval"](this._env).value : void 0;
        if (moveBucket) {
          if ((_ref1 = (_base = this._env).buckets) == null) {
            _base.buckets = {};
          }
          if ((_ref2 = (_base1 = this._env.buckets)[moveBucket]) == null) {
            _base1[moveBucket] = [];
          }
          this._env.buckets[moveBucket].push($node);
          return $node.detach();
        }
      };

      return MoveToDomVisitor;

    })(DomVisitor)
  };

  SetContentPlugin = {
    lessVisitor: SetContentVisitor = (function(_super) {

      __extends(SetContentVisitor, _super);

      function SetContentVisitor() {
        return SetContentVisitor.__super__.constructor.apply(this, arguments);
      }

      SetContentVisitor.prototype.visitRule = function(node, visitArgs) {
        var frame, _ref;
        frame = this.peek();
        switch (node.name) {
          case 'content':
            if ((_ref = frame.setContent) == null) {
              frame.setContent = [];
            }
            return frame.setContent.push(node.value);
        }
      };

      SetContentVisitor.prototype.operateOnElements = function(frame, $els) {
        if (!frame.hadPseudoSelectors) {
          return this.dataAppendAll($els, 'polyfill-content', frame.setContent);
        }
      };

      return SetContentVisitor;

    })(AbstractSelectorVisitor),
    domVisitor: SetContentDomVisitor = (function(_super) {

      __extends(SetContentDomVisitor, _super);

      function SetContentDomVisitor() {
        return SetContentDomVisitor.__super__.constructor.apply(this, arguments);
      }

      SetContentDomVisitor.prototype.domVisit = function($node) {
        var $pseudoBefore, $pseudoEls, $pseudoRest, content, contents, expr, exprValues, isValid, strings, val, _i, _j, _k, _len, _len1, _len2, _results;
        contents = this.evalWithContext('polyfill-content', $node);
        $node.removeData('polyfill-content');
        if (contents) {
          _results = [];
          for (_i = 0, _len = contents.length; _i < _len; _i++) {
            content = contents[_i];
            expr = content["eval"](this._env);
            if (expr.value instanceof Array && expr instanceof less.tree.Expression) {
              exprValues = expr.value;
            } else {
              exprValues = [expr];
            }
            strings = [];
            isValid = true;
            for (_j = 0, _len1 = exprValues.length; _j < _len1; _j++) {
              val = exprValues[_j];
              if (val instanceof less.tree.Call) {
                console.warn("Skipping {content: " + (expr.toCSS()) + ";} because no way to handle " + val.name + "().");
                isValid = false;
              } else {
                strings.push(val.value);
              }
            }
            if (isValid) {
              $pseudoEls = $node.children('.js-polyfill-pseudo');
              $pseudoBefore = $pseudoEls.not(':not(.js-polyfill-pseudo-before)');
              $pseudoRest = $pseudoEls.not($pseudoBefore);
              $node.empty();
              $node.append($pseudoBefore);
              for (_k = 0, _len2 = strings.length; _k < _len2; _k++) {
                val = strings[_k];
                $node.append(val);
              }
              _results.push($node.append($pseudoRest));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        }
      };

      return SetContentDomVisitor;

    })(DomVisitor)
  };

  parseCounters = function(val, defaultNum) {
    var counters, cssStr, i, name, tokens;
    cssStr = val.toCSS({});
    tokens = cssStr.split(' ');
    counters = {};
    if ('none' === tokens[0]) {
      return counters;
    }
    i = 0;
    while (i < tokens.length) {
      name = tokens[i];
      if (i === tokens.length - 1) {
        val = defaultNum;
      } else if (isNaN(parseInt(tokens[i + 1]))) {
        val = defaultNum;
      } else {
        val = parseInt(tokens[i + 1]);
        i++;
      }
      counters[name] = val;
      i++;
    }
    return counters;
  };

  toRoman = function(num) {
    var integer, numeral, result, romanNumeralMap, _i, _len, _ref;
    romanNumeralMap = [['M', 1000], ['CM', 900], ['D', 500], ['CD', 400], ['C', 100], ['XC', 90], ['L', 50], ['XL', 40], ['X', 10], ['IX', 9], ['V', 5], ['IV', 4], ['I', 1]];
    if (!((0 < num && num < 5000))) {
      console.warn('ERROR: number out of range (must be 1..4999)');
      return num;
    }
    result = '';
    for (_i = 0, _len = romanNumeralMap.length; _i < _len; _i++) {
      _ref = romanNumeralMap[_i], numeral = _ref[0], integer = _ref[1];
      while (num >= integer) {
        result += numeral;
        num -= integer;
      }
    }
    return result;
  };

  numberingStyle = function(num, style) {
    if (style == null) {
      style = 'decimal';
    }
    switch (style) {
      case 'decimal-leading-zero':
        if (num < 10) {
          return "0" + num;
        } else {
          return num;
        }
        break;
      case 'lower-roman':
        return toRoman(num).toLowerCase();
      case 'upper-roman':
        return toRoman(num);
      case 'lower-latin':
        if (!((1 <= num && num <= 26))) {
          console.error('ERROR: number out of range (must be 1...26)');
        }
        return String.fromCharCode(num + 96);
      case 'upper-latin':
        if (!((1 <= num && num <= 26))) {
          console.error('ERROR: number out of range (must be 1...26)');
        }
        return String.fromCharCode(num + 64);
      case 'decimal':
        return num;
      default:
        console.error("ERROR: Counter numbering not supported for list type " + style + ". Using decimal.");
        return num;
    }
  };

  CounterPlugin = {
    definedFunctions: {
      'counter': function(counterName, counterStyle) {
        var val, _ref;
        if (counterStyle == null) {
          counterStyle = null;
        }
        counterName = counterName.value;
        counterStyle = (counterStyle != null ? counterStyle.value : void 0) || 'decimal';
        val = ((_ref = this.env.counters) != null ? _ref[counterName] : void 0) || 0;
        return new ValueNode(numberingStyle(val, counterStyle));
      }
    },
    lessVisitor: CounterLessVisitor = (function(_super) {

      __extends(CounterLessVisitor, _super);

      function CounterLessVisitor() {
        return CounterLessVisitor.__super__.constructor.apply(this, arguments);
      }

      CounterLessVisitor.prototype.visitRule = function(node, visitArgs) {
        var frame, _ref, _ref1;
        frame = this.peek();
        switch (node.name) {
          case 'counter-reset':
            if ((_ref = frame.setCounterReset) == null) {
              frame.setCounterReset = [];
            }
            return frame.setCounterReset.push(node.value);
          case 'counter-increment':
            if ((_ref1 = frame.setCounterIncrement) == null) {
              frame.setCounterIncrement = [];
            }
            return frame.setCounterIncrement.push(node.value);
        }
      };

      CounterLessVisitor.prototype.operateOnElements = function(frame, $els) {
        var counterName, counters, val, _results;
        this.dataAppendAll($els, 'polyfill-counter-reset', frame.setCounterReset);
        this.dataAppendAll($els, 'polyfill-counter-increment', frame.setCounterIncrement);
        counters = {};
        if (frame.setCounterReset) {
          val = _.last(frame.setCounterReset)["eval"]();
          _.defaults(counters, parseCounters(val, true));
        }
        if (frame.setCounterIncrement) {
          val = _.last(frame.setCounterIncrement)["eval"]();
          _.defaults(counters, parseCounters(val, true));
        }
        _results = [];
        for (counterName in counters) {
          $els.addClass("js-polyfill-counter-change");
          _results.push($els.addClass("js-polyfill-counter-change-" + counterName));
        }
        return _results;
      };

      return CounterLessVisitor;

    })(AbstractSelectorVisitor),
    domVisitor: CounterDomVisitor = (function(_super) {

      __extends(CounterDomVisitor, _super);

      function CounterDomVisitor() {
        return CounterDomVisitor.__super__.constructor.apply(this, arguments);
      }

      CounterDomVisitor.prototype.domVisit = function($node) {
        var counters, countersChanged, exprs, key, val, value, _base, _base1, _ref, _ref1;
        if ((_ref = (_base = this._env).counters) == null) {
          _base.counters = {};
        }
        countersChanged = false;
        exprs = this.evalWithContext('polyfill-counter-reset', $node);
        if (exprs) {
          countersChanged = true;
          val = exprs[exprs.length - 1]["eval"](this._env);
          counters = parseCounters(val, 0);
          _.extend(this._env.counters, counters);
        }
        exprs = this.evalWithContext('polyfill-counter-increment', $node);
        if (exprs) {
          countersChanged = true;
          val = exprs[exprs.length - 1]["eval"](this._env);
          counters = parseCounters(val, 1);
          for (key in counters) {
            value = counters[key];
            if ((_ref1 = (_base1 = this._env.counters)[key]) == null) {
              _base1[key] = 0;
            }
            this._env.counters[key] += value;
          }
        }
        if (countersChanged) {
          $node.data('polyfill-counter-state', _.clone(this._env.counters));
          $node.addClass('js-polyfill-has-data');
          return $node.addClass("js-polyfill-polyfill-counter-state");
        }
      };

      return CounterDomVisitor;

    })(DomVisitor)
  };

  findBefore = function(el, root, iterator) {
    var $root, all, i, index, ret, _i, _ref;
    $root = $(root);
    all = _.toArray($root.add($root.find('*')));
    index = -1;
    for (i = _i = 0, _ref = all.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (all[i] === el) {
        index = i;
        break;
      }
    }
    ret = false;
    while (!ret && index > -1) {
      ret = iterator(all[index]);
      index--;
    }
    return ret;
  };

  TargetCounterPlugin = {
    definedFunctions: {
      'attr': function(attrName) {
        return new ValueNode(this.env.$context.attr(attrName.value));
      },
      'target-counter': function(id, counterName, counterStyle) {
        var $target, val;
        if (counterStyle == null) {
          counterStyle = null;
        }
        counterName = counterName.value;
        counterStyle = (counterStyle != null ? counterStyle.value : void 0) || 'decimal';
        id = id.value;
        if (id[0] !== '#') {
          console.error('ERROR: target-id MUST start with #');
        }
        $target = $(id);
        if ($target.length) {
          val = 0;
          findBefore($target[0], $('body')[0], function(node) {
            var $node, counters;
            $node = $(node);
            if ($node.is(".js-polyfill-counter-change-" + counterName)) {
              counters = $node.data('polyfill-counter-state');
              if (!counters) {
                console.error('BUG: Should have found a counter for this element');
              }
              val = counters[counterName];
              return true;
            }
            return false;
          });
          return new ValueNode(numberingStyle(val, counterStyle));
        } else {
          console.error('ERROR: target-counter id not found having id:', id);
          return new ValueNode('ERROR_TARGET_ID_NOT_FOUND');
        }
      }
    }
  };

  TargetTextPlugin = {
    definedFunctions: {
      'attr': function(attrName) {
        return new ValueNode(this.env.$context.attr(attrName.value));
      },
      'target-text': function(id, whichNode) {
        var $target, ret, whichText;
        if (whichNode == null) {
          whichNode = null;
        }
        if (id.value[0] !== '#') {
          console.error('ERROR: target-id MUST start with #');
        }
        $target = $(id.value);
        whichText = 'before';
        if (whichNode) {
          if ('content' !== whichNode.name) {
            console.error('ERROR: must be a content(...) call');
          }
          if (whichNode.args.length === 0) {
            whichText = 'contents';
          } else {
            whichText = whichNode.args[0].value;
          }
        }
        switch (whichText) {
          case 'before':
            ret = $target.children('.js-polyfill-pseudo-before').text();
            break;
          case 'after':
            ret = $target.children('.js-polyfill-pseudo-after').text();
            break;
          case 'contents':
            ret = $target.text();
            break;
          case 'first-letter':
            ret = $target.text()[0];
            break;
          default:
            console.error('ERROR: Invalid argument to content()');
        }
        return new ValueNode(ret);
      }
    }
  };

  StringSetPlugin = {
    definedFunctions: {
      'string': function(stringName) {
        var val, _ref;
        stringName = stringName.value;
        val = (_ref = this.env.strings) != null ? _ref[stringName] : void 0;
        if (!(val || val === '')) {
          console.warn("ERROR: using string that has not been set yet: name=[" + stringName + "]");
          val = '';
        }
        return new ValueNode(val);
      },
      'x-content': function(type) {
        var getContent, val,
          _this = this;
        if (type == null) {
          type = null;
        }
        val = null;
        getContent = function() {
          var $el;
          $el = _this.env.$context.clone();
          $el.children('.js-polyfill-pseudo').remove();
          return $el.text();
        };
        if (type) {
          switch (type.value) {
            case 'before':
              val = this.env.$context.children('.js-polyfill-pseudo-before').text();
              break;
            case 'after':
              val = this.env.$context.children('.js-polyfill-pseudo-after').text();
              break;
            case 'first-letter':
              val = getContent().trim()[0] || '';
              break;
            default:
              val = type.toCSS({});
              console.warn("ERROR: invalid argument to content(). argument=[" + val + "]");
              val = '';
          }
        } else {
          val = getContent();
        }
        return new ValueNode(val);
      }
    },
    lessVisitor: StringLessVisitor = (function(_super) {

      __extends(StringLessVisitor, _super);

      function StringLessVisitor() {
        return StringLessVisitor.__super__.constructor.apply(this, arguments);
      }

      StringLessVisitor.prototype.visitRule = function(node, visitArgs) {
        var frame, _ref;
        frame = this.peek();
        switch (node.name) {
          case 'string-set':
            if ((_ref = frame.setStringSet) == null) {
              frame.setStringSet = [];
            }
            return frame.setStringSet.push(node.value);
        }
      };

      StringLessVisitor.prototype.operateOnElements = function(frame, $els) {
        return this.dataAppendAll($els, 'polyfill-string-set', frame.setStringSet);
      };

      return StringLessVisitor;

    })(AbstractSelectorVisitor),
    domVisitor: StringDomVisitor = (function(_super) {

      __extends(StringDomVisitor, _super);

      function StringDomVisitor() {
        return StringDomVisitor.__super__.constructor.apply(this, arguments);
      }

      StringDomVisitor.prototype.domVisit = function($node) {
        var exprs, setString, v, val, _base, _i, _len, _ref, _ref1,
          _this = this;
        if ((_ref = (_base = this._env).strings) == null) {
          _base.strings = {};
        }
        exprs = this.evalWithContext('polyfill-string-set', $node);
        if (exprs) {
          val = exprs[exprs.length - 1]["eval"](this._env);
          setString = function(val) {
            var arg, args, str, stringName, _i, _len;
            stringName = _.first(val.value).value;
            args = _.rest(val.value);
            str = [];
            for (_i = 0, _len = args.length; _i < _len; _i++) {
              arg = args[_i];
              if (arg instanceof less.tree.Quoted) {
                str.push(arg.value);
              } else if (arg instanceof less.tree.Call) {
                if ('content' === arg.name) {
                  arg.name = 'x-content';
                  str.push(arg["eval"](_this._env).value);
                  arg.name = 'content';
                } else {
                  console.warn("ERROR: invalid function used. only content() is acceptable. name=[" + arg.name);
                }
              } else {
                str.push(arg.value);
              }
            }
            return _this._env.strings[stringName] = str.join('');
          };
          if (val instanceof less.tree.Expression) {
            setString(val);
          } else if (val instanceof less.tree.Value) {
            _ref1 = val.value;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              v = _ref1[_i];
              setString(v);
            }
          } else {
            console.warn('ERROR: invalid arguments given to "string-set:"');
          }
          $node.data('polyfill-string-state', _.clone(this._env.counters));
          $node.addClass('js-polyfill-has-data');
          return $node.addClass("js-polyfill-polyfill-string-state");
        }
      };

      return StringDomVisitor;

    })(DomVisitor)
  };

  window.CSSPolyfill = function($root, cssStyle, cb) {
    var p1;
    if (cb == null) {
      cb = null;
    }
    p1 = new less.Parser();
    return p1.parse(cssStyle, function(err, val) {
      var doStuff, env, plugins;
      if (err) {
        return cb(err, value);
      }
      env = {};
      doStuff = function(plugins) {
        var domVisitors, func, funcName, funcs, lessPlugins, name, plugin, _i, _j, _k, _len, _len1, _len2, _ref, _results;
        lessPlugins = [];
        for (_i = 0, _len = plugins.length; _i < _len; _i++) {
          plugin = plugins[_i];
          if (plugin.lessVisitor) {
            lessPlugins.push(new plugin.lessVisitor($root));
          }
        }
        env.plugins = lessPlugins;
        val.toCSS(env);
        funcs = {};
        for (_j = 0, _len1 = plugins.length; _j < _len1; _j++) {
          plugin = plugins[_j];
          _ref = plugin.definedFunctions;
          for (name in _ref) {
            func = _ref[name];
            funcs[name] = func;
          }
        }
        domVisitors = [];
        for (_k = 0, _len2 = plugins.length; _k < _len2; _k++) {
          plugin = plugins[_k];
          if (plugin.domVisitor) {
            domVisitors.push(new plugin.domVisitor(funcs, env));
          }
        }
        $root.find('*').each(function(i, el) {
          var $el, v, _l, _len3, _results;
          $el = $(el);
          _results = [];
          for (_l = 0, _len3 = domVisitors.length; _l < _len3; _l++) {
            v = domVisitors[_l];
            _results.push(v.domVisit($el));
          }
          return _results;
        });
        _results = [];
        for (funcName in funcs) {
          _results.push(delete less.tree.functions[funcName]);
        }
        return _results;
      };
      plugins = [ClassRenamerPlugin];
      doStuff(plugins);
      plugins = [MoveToPlugin, SetContentPlugin];
      doStuff(plugins);
      plugins = [PseudoExpanderPlugin, RemoveDisplayNonePlugin];
      doStuff(plugins);
      plugins = [CounterPlugin, SetContentPlugin];
      doStuff(plugins);
      plugins = [TargetCounterPlugin, TargetTextPlugin, SetContentPlugin];
      doStuff(plugins);
      plugins = [StringSetPlugin, SetContentPlugin];
      doStuff(plugins);
      return typeof cb === "function" ? cb(null, val.toCSS({})) : void 0;
    });
  };

}).call(this);
